/*
 * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
 
import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id "com.github.spotbugs-base" version "${spotbugsPluginVersion}"
    id "com.github.johnrengelman.shadow" version "${shadowJarPluginVersion}"
    id "de.undercouch.download" version "${downloadPluginVersion}"
    id "net.researchgate.release" version "${releasePluginVersion}"
}
apply plugin: 'maven-publish'

allprojects {
    group = project.group
    version = project.version

    apply plugin: 'jacoco'
    apply plugin: 'maven-publish'

    repositories {
        mavenLocal()
        maven {
            url = 'https://maven.wso2.org/nexus/content/repositories/releases/'
        }

        maven {
            url = 'https://maven.wso2.org/nexus/content/groups/wso2-public/'
        }

        maven {
            url = 'https://repo.maven.apache.org/maven2'
        }

        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/*'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
    }

    ext {
        snapshotVersion= '-SNAPSHOT'
        timestampedVersionRegex = '.*-\\d{8}-\\d{6}-\\w.*\$'
    }
}

subprojects {
    configurations {
        ballerinaStdLibs
    }
    dependencies {
        /* Standard libraries */
        ballerinaStdLibs "io.ballerina.stdlib:observe-ballerina:${observeVersion}"
        ballerinaStdLibs "io.ballerina:observe-ballerina:${observeInternalVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:http-ballerina:${stdlibHttpVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:grpc-ballerina:${stdlibGrpcVersion}"
    }
}

task updateVersionesterinaReportTools(type: Exec) {
    workingDir "testerina-report-tools"
    doFirst {
        println "update version to " + project.version
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            commandLine 'cmd', '/c', 'npm', 'run', 'update-version', '--', project.version
        } else {
            commandLine 'npm', 'run', 'update-version', '--', project.version
        }
    }
}

task npmInstallTesterinaReportTools(type: Exec) {
    dependsOn updateVersionesterinaReportTools
    workingDir "testerina-report-tools"
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        commandLine 'cmd', '/c', 'npm', 'install'
    } else {
        commandLine 'npm', 'install'
    }
}

task npmBuildTesterinaReportTools(type: Exec) {
    dependsOn npmInstallTesterinaReportTools
    workingDir "testerina-report-tools"
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        commandLine 'cmd', '/c', 'npm', 'run', 'build'
    } else {
        commandLine 'npm', 'run', 'build'
    }
}

task createTesterinaReportToolsZip(type: Zip) {
    dependsOn npmBuildTesterinaReportTools
    from "testerina-report-tools/build"
    include 'index.html'
    include 'favicon.ico'
    include 'manifest.json'
    include '**/static/css/*.css'
    include '**/static/js/*.js'
    exclude '**/static/js/runtime-*.js'
    archiveName 'testerina-report-tools-' + project.version + '.zip'
    destinationDir(file("build"))
}

task updateVersionDocerinaUi(type: Exec) {
    workingDir "docerina-ui"
    doFirst {
        println "update version to " + project.version
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            commandLine 'cmd', '/c', 'npm', 'run', 'update-version', '--', project.version
        } else {
            commandLine 'npm', 'run', 'update-version', '--', project.version
        }
    }
}
task npmInstallDocerinaUI(type: Exec) {
    dependsOn updateVersionDocerinaUi
    workingDir "docerina-ui"
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        commandLine 'cmd', '/c', 'npm', 'install'
    } else {
        commandLine 'npm', 'install'
    }
}

task npmBuildDocerinaUI(type: Exec) {
    dependsOn npmInstallDocerinaUI
    workingDir "docerina-ui"
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        commandLine 'cmd', '/c', 'npm', 'run', 'build'
    } else {
        commandLine 'npm', 'run', 'build'
    }
}

task npmTestDocerinaUI(type: Exec) {
    dependsOn npmInstallDocerinaUI
    workingDir "docerina-ui"
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        commandLine 'cmd', '/c', 'npm', 'run', 'test'
    } else {
        commandLine 'npm', 'run', 'test'
    }
}

task createDocerinaUiZip(type: Zip) {
    dependsOn npmBuildDocerinaUI
    from "docerina-ui/dist"
    archiveName 'docerina-ui-' + project.version + '.zip'
    destinationDir(file("build"))
}

task createFinalZip(type: Zip) {
    dependsOn createDocerinaUiZip
    dependsOn createTesterinaReportToolsZip
    from "build"
    archiveName 'ballerina-dev-tools-' + project.version + '.zip'
    destinationDir(file("dist"))
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact source: createFinalZip, extension: 'zip'
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/ballerina-platform/ballerina-dev-tools")
            credentials {
                username = System.getenv("packageUser")
                password = System.getenv("packagePAT")
            }
        }
    }
}

def moduleVersion = project.version
if (moduleVersion.indexOf('-') != -1) {
    moduleVersion = moduleVersion.substring(0, moduleVersion.indexOf('-'))
}
release {
    failOnPublishNeeded = false

    buildTasks = ['build']
    versionPropertyFile = 'gradle.properties'
    tagTemplate = 'v${version}'
    git {
        // To release from any branch
        requireBranch = "release-${moduleVersion}"
        pushToRemote = 'origin'
    }
}

task test {
    dependsOn npmTestDocerinaUI
}

task build {
    dependsOn test
    dependsOn createFinalZip
}

task clean {
    delete "build"
    delete "dist"
}
